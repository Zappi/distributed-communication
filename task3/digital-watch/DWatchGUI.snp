Started = 1
__doc__ = ' Eventhandler class represents the simulator which interprets the model. '
__module__ = 'EventHandler'
aftersnp = []
beforesnp = []
components = {}
connections = {}
description = ''
empty_event_signal = None
encapsulated_components = {}
enter = {}
exit = {}
final = []
finished = 0
haddition = []
has_interactor = 0
history = {}
imports = {}
influencees = {}
init = []
interactor = ['setup_gui_debugger(eventhandler, debugger)\n']
internal_num = 0
internal_prefix = 0
local_restored = 0
macro = {'[DUMP]': [[['[msg]', '']], 'dump_message([msg])'], '[SNAPSHOTRET]': [[['[time]', '']], 'eventhandler.retrieve_snapshot([time])'], '[PARAMS]': [[], 'eventhandler.get_event_params()'], '[SENDER]': [[], 'eventhandler.get_event_sender()'], '[EVENT]': [[['[ev]', ''], ['[p]', '[]'], ['[lock]', 'None']], 'eventhandler.event([ev], [p], 1, [lock])'], '[CURRENTSTATE]': [[], 'eventhandler.get_current_state()'], '[EXTEVENT]': [[['[ev]', ''], ['[p]', ''], ['[rec]', '']], 'eventhandler.external_event([ev], [p], [rec])'], '[INSTATE]': [[['[state]', ''], ['[check_substate]', '1']], 'eventhandler.is_in_state([state], [check_substate])'], '[DESCRIPTION]': [[], 'eventhandler.description'], '[SYNCALL]': [[['[event]', ''], ['[params]', ''], ['[listento]', '']], 'eventhandler.synchronous_call([event], [params], [listento])'], '[SNAPSHOTREQ]': [[['[time]', '']], 'eventhandler.request_snapshot([time])']}
model_name = 'DWatchGUI.py'
modeltext = None
newttrans = {}
options = {'Timewarp': '0', 'ModelName': 'DWatchGUI', 'InnerTransitionFirst': '0', 'TimeVariable': None, 'TimewarpPort': None, 'TopLevel': '0', 'Harel': '1', 'MessageTime': 'None'}
outgoing_table = {}
param = {}
ports = {}
required_components = {}
required_connections = []
restore = []
restored = 0
snapshot_objects = []
snapshot_requests = []
snapshot_retrieve = None
state = []
stateH = {}
taddition = []
top_level = 1
trans = {}
use_gui = 1
work_path = 'svmwork'
global_snapshot_objects = {}
clock_threads = []
