INITIALIZER:
    from Tkinter import *
    from DWatchGUI import DWatchGUI

    root = Tk()
    root.title("Super Cool Clock")
    g = DWatchGUI(root, eventhandler)

    eventhandler.start()

    root.mainloop()
    exit()

STATECHART:
    Time [CS][DS]
      Run [DS]
      Stop 
    Light [CS][DS]
      On
      Off [DS]
    Chrono [CS][DS]
      On
      Off [DS]
    Refresh [CS][DS]
      Time [DS]
      Chrono
      Alarm
      Stop
    EditTime [CS] [DS]
      Off [DS]
      OffDelay
      On
      OnDelay
    Alarm [CS] [DS]
      Off [DS]
      OffDelay
      On
      OnDelay
 
#TIME CONTROL 
TRANSITION:
    S: Time.Run
    N: Time.Run
    T: 1
    O: g.increaseTimeByOne()

#LIGHT CONTROL      
TRANSITION:
    S: Light.Off
    N: Light.On
    E: lightOn
    O: g.setIndiglo()

TRANSITION:
    S: Light.On
    N: Light.Off
    T: 2 
    O: g.unsetIndiglo()
     
#CHRONO CONTROL

TRANSITION:
    S: Chrono.Off
    N: Chrono.On
    E: initChrono

TRANSITION:
    S: Chrono.On
    N: Chrono.On
    T: 0.25
    O: g.increaseChronoByOne()

TRANSITION:
    S: Chrono.On
    N: Chrono.Off
    E: initChrono

TRANSITION:
    S: Chrono.Off
    N: Chrono.Off
    E: resetChrono
    O: g.resetChrono()

#EDIT CONTROL

TRANSITION:
    S: EditTime.Off
    C: [INSTATE("Refresh.Time")]
    N: EditTime.OnDelay
    E: editTime

TRANSITION:
    S: EditTime.OnDelay
    N: EditTime.On
    T: 1.5
    O: [EVENT("editTimeEvent")]
       print "Editing time"

TRANSITION:
    S: EditTime.OnDelay
    C: [INSTATE("Refresh.Time")]
    N: EditTime.Off
    E: released

TRANSITION:
    S: EditTime.On
    N: EditTime.On
    E: initChrono
    O: g.selectNext()

TRANSITION:
    S: EditTime.On
    N: EditTime.On
    E: increase
    O: g.increaseSelection()

TRANSITION:
    S: EditTime.On
    C: [INSTATE("Refresh.Stop")]
    N: EditTime.OffDelay
    E: editTime

TRANSITION:
    S: EditTime.OffDelay
    N: EditTime.Off
    T: 2
    O: [EVENT("editTimeEvent")]
       print "Editing done"

TRANSITION:
    S: EditTime.OffDelay
    C: [INSTATE("Refresh.Stop")]
    N: EditTime.On
    E: released

#ALARM

TRANSITION:
    S: Alarm.Off
    N: Alarm.OnDelay
    O: [INSTATE("Refresh.Time")]
    E: setAlarm

TRANSITION:
    S: Alarm.OnDelay
    C: [INSTATE("Refresh.Time")]
    N: Alarm.Off
    E: onoff
    O: [EVENT("alarmModeChange")]

TRANSITION:
    S: Alarm.OnDelay
    C: [INSTATE("Refresh.Alarm")]
    N: Alarm.Off
    E: onoff
    O: [EVENT("alarmModeChange")]

TRANSITION:
    S: Alarm.OnDelay
    N: Alarm.On
    T: 1.5
    O: [EVENT("alarmModeChange")]

TRANSITION:
    S: Alarm.On
    C: [INSTATE("Refresh.Alarm")]
    N: Alarm.On
    E: increase
    O: g.increaseSelection()

TRANSITION:
    S: Alarm.On
    C: [INSTATE("Refresh.Alarm")]
    N: Alarm.On
    E: editTime
    O: g.selectNext()

TRANSITION:
    S: Alarm.On
    N: Alarm.OffDelay
    E: finishEdit

TRANSITION:
    S: Alarm.OffDelay
    N: Alarm.Off
    T: 2
    O: g.stopSelection()

TRANSITION:
    S: Alarm.Off
    N: Alarm.Off
    O: [EVENT("alarmModeChange")]

#REFRESH CONTROL

TRANSITION:
    S: Refresh.Time
    N: Refresh.Time
    T: 0.05
    O: g.refreshTimeDisplay()

TRANSITION:
    S: Refresh.Chrono
    N: Refresh.Chrono
    T: 0.05
    O:  g.refreshChronoDisplay()

TRANSITION:
    S: Refresh.Time
    N: Refresh.Chrono
    E: changeMode
    O:  g.refreshChronoDisplay()

TRANSITION:
    S: Refresh.Chrono
    N: Refresh.Time
    E: changeMode
    O: g.refreshTimeDisplay()

TRANSITION:
    S: Refresh.Alarm
    N: Refresh.Alarm
    T: 0.05
    O: g.refreshAlarmDisplay()

TRANSITION:
    S: Refresh.Time
    N: Refresh.Alarm
    E: alarmModeChange
    O: g.refreshAlarmDisplay()
       g.setAlarm()

TRANSITION:
    S: Refresh.Alarm
    N: Refresh.Time
    E: alarmModeChange
    O:  g.refreshTimeDisplay()
        g.stopSelection()
        g.setAlarm()

TRANSITION:
    S: Refresh.Time
    N: Refresh.Stop
    E: editTimeEvent

TRANSITION:
    S: Refresh.Stop
    N: Refresh.Time
    E: editTimeEvent
    O: g.stopSelection()